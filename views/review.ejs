<!DOCTYPE html>
<html lang="en">
    <%- include('./partials/head'); %>
    <body class="vh-100 vw-100 d-flex flex-column justify-content-between">
        <header>
            <% if (!!reviewer) { %>
                <nav class="navbar bg-light">
                    <div class="container-fluid">
                        <div>
                            <i class="bi bi-person-fill"></i>
                            <span class="navbar-brand mb-0 h1">
                                <%= reviewer.name %>
                            </span>
                        </div>
                    </div>
                </nav>
            <% } %>
        </header>
        <main>
            <div class="container">
                <% if (!!reviewer && !!instance) { %>
                    <div class="row">
                        <div class="col">
                            <h1 class="text-center m-3">Task: <%- instance.task %></h1>
                        </div>
                    </div>
                    <div class="row">
                        <%
                            const input_code = instance.input_code || " ";
                            const input_nl = instance.input_nl || " ";
                            const language = instance.task === "C&NL2C" ? "java" : "plaintext";
                            const output = instance.output || " ";
                            const target = instance.target || " ";
                        %>
                        <div class="col overflow-hidden">
                            <label class="mb-2">Input Source Code</label>
                            <pre class="border rounded"><code class="language-java"><%= input_code %></code></pre>
                            <label class="mb-2">Input Comment</label>
                            <pre class="border rounded"><code class="language-plaintext"><%= input_nl %></code></pre>
                        </div>
                        <div class="col-auto vr g-0"></div>
                        <div class="col overflow-hidden">
                            <label class="mb-2">Actual Output</label>
                            <pre class="border rounded"><code class="language-<%- language %>"><%= output %></code></pre>
                            <label class="mb-2">Expected Output</label>
                            <pre class="border rounded"><code class="language-<%- language %>"><%= target %></code></pre>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col text-end">
                            <button type="button"
                                    class="btn btn-primary"
                                    data-bs-toggle="offcanvas"
                                    data-bs-target="#label-offcanvas"
                                    aria-controls="label-offcanvas"
                                    autofocus
                            >
                                Label
                            </button>
                        </div>
                        <div class="col text-start">
                            <button id="discard-instance"
                                    type="button"
                                    class="btn btn-danger"
                            >
                                Discard
                            </button>
                        </div>
                    </div>
                    <div id="label-offcanvas"
                         class="offcanvas offcanvas-end"
                         aria-labelledby="label-offcanvas-title"
                         tabindex="-1"
                    >
                        <div class="offcanvas-header">
                            <h5 class="offcanvas-title" id="label-offcanvas-title">Assign Labels</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close">
                            </button>
                        </div>
                        <div class="offcanvas-body">
                            <form id="label-add" class="mb-2">
                                <div class="input-group">
                                    <input type="text"
                                           id="label-add-input"
                                           class="form-control"
                                           placeholder="Define a new label..."
                                           aria-describedby="label-add-button"
                                           aria-label="New Label"
                                           required
                                    />
                                    <button type="submit" id="label-add-button" class="btn btn-dark">
                                        Add!
                                    </button>
                                </div>
                            </form>
                            <form id="label-instance">
                                <select id="label-instance-select"
                                        class="form-select mb-2"
                                        aria-label="Assign Labels"
                                        size="10"
                                        multiple
                                        required
                                >
                                    <% labels.forEach(label => { %>
                                        <option value="<%- label.id %>"><%- label.name %></option>
                                    <% }) %>
                                </select>
                                <p class="text-center text-muted user-select-none border rounded mb-2">
                                    Hold <i class="bi bi-command"></i> to select multiple labels
                                </p>
                                <div class="form-check mb-2">
                                    <input id="label-instance-interesting"
                                           class="form-check-input"
                                           type="checkbox"
                                           value=""
                                    />
                                    <label for="label-instance-interesting" class="form-check-label">
                                        This instance is interesting
                                    </label>
                                </div>
                                <div class="d-grid">
                                    <button type="submit" class="btn btn-primary btn-lg">
                                        Label Instance!
                                    </button>
                                </div>
                            </form>
                            <%-
                                include(
                                    './partials/toast',
                                    {
                                        id: "label-add-toast",
                                        body: "Label already exists!",
                                        variant: "danger"
                                    }
                                )
                            %>
                        </div>
                    </div>
                    <%-
                        include(
                            './partials/toast',
                            {
                                id: "socket-disconnect-toast",
                                body: "Server connection lost!",
                                variant: "danger"
                            }
                        )
                    %>
                    <%-
                        include(
                            './partials/toast',
                            {
                                id: "socket-reconnect-toast",
                                body: "Server connection restored!",
                                variant: "success"
                            }
                        )
                    %>
                <% } else if (!!reviewer && !instance) { %>
                    <h1 class="text-center mb-3">
                        <i class="bi bi-emoji-smile-fill"></i>
                        Review Queue Cleared!
                    </h1>
                <% } else { %>
                    <h1 class="text-center mb-3">
                        <i class="bi bi-emoji-dizzy-fill"></i>
                        You Must Log In First!
                    </h1>
                    <%- include('./partials/home-button'); %>
                <% } %>
            </div>
        </main>
        <%- include('./partials/footer'); %>
        <%- include('./partials/scripts/general'); %>
        <%- include('./partials/scripts/hljs'); %>
        <% if (!!reviewer && !!instance) { %>
            <script src="/socket.io/socket.io.js"></script>
            <script>
                const socket = io();
                const reviewer = <%- JSON.stringify(reviewer) %>;
                const instance = <%- JSON.stringify(instance) %>;
                const labelAddForm = document.getElementById("label-add");
                const labelAddInput = document.getElementById("label-add-input");
                const labelAddToast = document.getElementById("label-add-toast");
                const labelInstance = document.getElementById("label-instance");
                const labelInstanceSelect = document.getElementById("label-instance-select");
                const labelInstanceInteresting = document.getElementById("label-instance-interesting");
                const discardInstance = document.getElementById("discard-instance");
                const socketDisconnectToast = document.getElementById("socket-disconnect-toast");
                const socketReconnectToast = document.getElementById("socket-reconnect-toast");

                const toast = (element) => {
                    new bootstrap.Toast(element).show();
                };

                socket.on("disconnect", () => toast(socketDisconnectToast));
                socket.io.on("reconnect", () => toast(socketReconnectToast));

                const normalize = (name) => {
                    return name.replaceAll(/\s+/g, " ").toLowerCase().trim();
                }

                const addOption = (label) => {
                    const created_option = new Option(label.name, label.id);
                    const existing_options = labelInstanceSelect.options;
                    for (let idx = 0; idx < existing_options.length; idx++) {
                        const current_option = existing_options.item(idx);
                        if (created_option.innerHTML < current_option.innerHTML) {
                            labelInstanceSelect.insertBefore(created_option, current_option);
                            break;
                        } else if (idx === existing_options.length - 1) {
                            labelInstanceSelect.appendChild(created_option);
                        }
                    }
                };

                labelAddForm.addEventListener("submit", (event) => {
                    event.preventDefault();
                    const name = normalize(labelAddInput.value);
                    labelAddInput.value = null;
                    axios.post("/label", { name: name })
                        .then(({ data: label }) => {
                            addOption(label);
                            socket.emit("label_added", label);
                        })
                        .catch(() => toast(labelAddToast));
                });

                socket.on("label_append", (label) => addOption(label));

                labelInstance.addEventListener("submit", (event) => {
                    event.preventDefault();
                    const selected = [ ...labelInstanceSelect.selectedOptions ].map(({ value }) => Number(value));
                    const payload = {
                        instance_id: instance.id,
                        reviewer_id: reviewer.id,
                        is_interesting: labelInstanceInteresting.checked,
                        label_ids: selected
                    };
                    axios.post("/instance/submit", payload).then(() => history.go());
                });

                discardInstance.addEventListener("click", () => {
                    const payload = {
                        instance_id: instance.id,
                        reviewer_id: reviewer.id
                    };
                    axios.post("/instance/discard", payload).then(() => history.go());
                });
            </script>
        <% } %>
    </body>
</html>